Title page
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ERP extends JFrame {
    public static void main(String[] args) {
        // Create frame
        JFrame frame = new JFrame("Login");
        frame.setSize(270, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new FlowLayout());

        // Background color
        Color lightBackground = new Color(245, 245, 220); // Linen
        frame.getContentPane().setBackground(lightBackground);

        // Button color
        Color brown = new Color(181, 101, 29);

        // Create components
        JLabel label = new JLabel("Username:");
        JTextField field = new JTextField(15);

        JLabel label2 = new JLabel("Password:");
        JPasswordField passwordField = new JPasswordField(15);

        JButton button = new JButton("Login");
        button.setBackground(brown);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);

        JLabel outputLabel = new JLabel();
        outputLabel.setForeground(Color.RED);

        // Action listener
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String name = field.getText();
                String password = new String(passwordField.getPassword());

                if (name.equalsIgnoreCase("kat") && password.equals("123")) {
                    frame.dispose();
                    new OptionsWindow(); // Assuming OptionsWindow exists
                } else {
                    outputLabel.setText("Invalid Credentials");
                }
            }
        });

        // Add components to frame
        frame.add(label);
        frame.add(field);
        frame.add(label2);
        frame.add(passwordField);
        frame.add(button);
        frame.add(outputLabel);

        // Show frame
        frame.setVisible(true);
    }
}


Option window
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class OptionsWindow extends JFrame {
    public OptionsWindow() {
        super("Options");

        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        JLabel label = new JLabel("Select an option:");
        label.setFont(new Font("Arial", Font.BOLD, 13));

        JButton invent = new JButton("Inventory");
        JButton sale = new JButton("Sales");
        JButton purchase = new JButton("Purchase");

        // Style buttons
        JButton[] buttons = { invent, sale, purchase };
        for (JButton btn : buttons) {
            btn.setBackground(brown);
            btn.setForeground(Color.WHITE);
            btn.setFocusPainted(false);
            btn.setPreferredSize(new Dimension(100, 30));
        }

        // Set layout and background
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(beige);
        buttonPanel.setLayout(new GridLayout(4, 1, 10, 10));
        buttonPanel.add(label);
        buttonPanel.add(invent);
        buttonPanel.add(sale);
        buttonPanel.add(purchase);

        // Image
        ImageIcon icon = new ImageIcon("kat.jpg");
        Image newImg = icon.getImage().getScaledInstance(250, 150, Image.SCALE_SMOOTH);
        JLabel imageLabel = new JLabel(new ImageIcon(newImg));
        imageLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));  // Add top margin

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(beige);
        mainPanel.add(imageLabel, BorderLayout.NORTH);
        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        setContentPane(mainPanel);

        // Button listeners
        invent.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                Inventory window = new Inventory();
                window.setSize(1000, 400);
            }
        });

        sale.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                Sales window = new Sales();
                window.setSize(1200, 400);
            }
        });

        purchase.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                Purchase window = new Purchase();
                window.setSize(1000, 400);
            }
        });

        setSize(300, 350);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}

Inventory
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.FileWriter;

public class Inventory extends JFrame {
    public Inventory() {
        super("Inventory");

        // Changed colors only
        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        String[] cols = { "Item", "Quantity", "Price" };
        Object[][] data = {
            {"Benches", 100, "$300"},
            {"Book shelfs", 25 , "$750"},
            {"Cabnets", 75, "$800"},
            {"Counter", 40, "$400"},
            {"Desks", 80, "$600"},
            {"Lab Stools", 60, "$100"},
            {"Meeting tables", 30, "$750"},
            {"Office chairs", 100, "$250"},
            {"Sofa", 50, "$500"},
            {"Student chairs", 100, "$200"}
        };

        DefaultTableModel model = new DefaultTableModel(data, cols);
        JTable table = new JTable(model); 
        JScrollPane scroll = new JScrollPane(table);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        JButton back = new JButton("Back");
        JButton delete = new JButton("Delete");
        JButton searchBtn = new JButton("Search");
        JButton addBtn = new JButton("Add data");

        JTextField searchField = new JTextField(20);
        JTextField itemField = new JTextField(10);
        JTextField quantityField = new JTextField(10);
        JTextField priceField = new JTextField(10);

        // Style buttons
        JButton[] buttons = { back, delete, searchBtn, addBtn };
        for (JButton btn : buttons) {
            btn.setBackground(brown);
            btn.setForeground(Color.WHITE);
        }

        // Search Panel
        JPanel searchPanel = new JPanel(new FlowLayout());
        searchPanel.setBackground(beige);
        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchField);
        searchPanel.add(searchBtn);

        // Add Panel
        JPanel addPanel = new JPanel(new FlowLayout());
        addPanel.setBackground(beige);
        addPanel.add(new JLabel("Item:"));
        addPanel.add(itemField);
        addPanel.add(new JLabel("Quantity:"));
        addPanel.add(quantityField);
        addPanel.add(new JLabel("Price:"));
        addPanel.add(priceField);
        addPanel.add(addBtn);

        // Bottom panel
        JPanel controlPanel = new JPanel(new FlowLayout());
        controlPanel.setBackground(beige);
        controlPanel.add(back);
        controlPanel.add(delete);

        // Combine panels
        JPanel southPanel = new JPanel(new GridLayout(3, 1));
        southPanel.setBackground(beige);
        southPanel.add(searchPanel);
        southPanel.add(addPanel);
        southPanel.add(controlPanel);

        // Listeners
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                new OptionsWindow(); // Ensure this class exists
            }
        });

        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    model.removeRow(row);
                }
            }
        });

        searchBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String text = searchField.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });

        addBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String item = itemField.getText().trim();
                String qty = quantityField.getText().trim();
                String price = priceField.getText().trim();

                if (item.isEmpty() || qty.isEmpty() || price.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields: ( Item, Quantity, and Price. )", "Input Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    model.addRow(new Object[] { item, qty, price });

                    try {
                        FileWriter writer = new FileWriter("data.csv", true);
                        writer.write(item + "," + qty + "," + price + "\n");
                        writer.close();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                    itemField.setText("");
                    quantityField.setText("");
                    priceField.setText("");
                }
            }
        });

        // Layout setup
        setLayout(new BorderLayout());
        getContentPane().setBackground(beige);
        add(scroll, BorderLayout.CENTER);
        add(southPanel, BorderLayout.SOUTH);

        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}

Sales
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;

public class Sales extends JFrame {
    public Sales() {

        super("Sales");

        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        String[] cols = {"Item", "Quantity", "Date", "Sold"};
        Object[][] data = {
            {"Benches", 100, "10/5/25", "$300"},
            {"Book shelfs", 25, "12/5/25", "$750"},
            {"Cabnets", 75, "13/5/25", "$800"},
            {"Counter", 40, "14/5/25", "$400"},
            {"Desks", 80, "15/5/25", "$600"},
            {"Lab Stools", 60, "16/5/25", "$100"},
            {"Meeting tables", 30, "17/5/25", "$750"},
            {"Office chairs", 100, "18/5/25", "$250"},
            {"Sofa", 50, "19/5/25", "$500"},
            {"Student chairs", 100, "20/5/25", "$200"}
        };

        DefaultTableModel model = new DefaultTableModel(data, cols);
        JTable table = new JTable(model);
        JScrollPane scroll = new JScrollPane(table);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        JButton back = new JButton("Back");
        JButton delete = new JButton("Delete");
        JButton profit = new JButton("Profit");
        JButton search = new JButton("Search");
        JTextField searchbar = new JTextField(20);
        JButton addbutton = new JButton("Add data");

        // Style buttons
        JButton[] buttons = {back, delete, profit, search, addbutton};
        for (JButton btn : buttons) {
            btn.setBackground(brown);
            btn.setForeground(Color.WHITE);
        }

        JPanel searchpanel = new JPanel(new FlowLayout());
        searchpanel.setBackground(beige);
        searchpanel.add(new JLabel("Search:"));
        searchpanel.add(searchbar);
        searchpanel.add(search);

        JPanel addpanel = new JPanel(new FlowLayout());
        addpanel.setBackground(beige);

        JTextField itemfield = new JTextField(10);
        JTextField quantityfield = new JTextField(10);
        JTextField datefield = new JTextField(10);
        JTextField soldfield = new JTextField(10);

        addpanel.add(new JLabel("Item:"));
        addpanel.add(itemfield);
        addpanel.add(new JLabel("Quantity:"));
        addpanel.add(quantityfield);
        addpanel.add(new JLabel("Date:"));
        addpanel.add(datefield);
        addpanel.add(new JLabel("Sold:"));
        addpanel.add(soldfield);
        addpanel.add(addbutton);

        JPanel bottompanel = new JPanel(new FlowLayout());
        bottompanel.setBackground(beige);
        bottompanel.add(back);
        bottompanel.add(delete);
        bottompanel.add(profit);

        JPanel southPanel = new JPanel(new GridLayout(3, 1));
        southPanel.setBackground(beige);
        southPanel.add(searchpanel);
        southPanel.add(addpanel);
        southPanel.add(bottompanel);

        getContentPane().setBackground(beige);

        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                new OptionsWindow();
            }
        });

        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    model.removeRow(row);
                }
            }
        });

        profit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                Profit window = new Profit();
                window.setSize(600, 600);
            }
        });

        search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String text = searchbar.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });

        addbutton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String I = itemfield.getText().trim();
                String Q = quantityfield.getText().trim();
                String D = datefield.getText().trim();
                String S = soldfield.getText().trim();

                if (I.isEmpty() || Q.isEmpty() || D.isEmpty() || S.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields: ( Item, Quantity, Date, and Sold. )", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                model.addRow(new Object[]{I, Q, D, S});

                try {
                    FileWriter writer = new FileWriter("data.csv", true);
                    writer.write(I + "," + Q + "," + D + "," + S + "\n");
                    writer.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                itemfield.setText("");
                quantityfield.setText("");
                datefield.setText("");
                soldfield.setText("");
            }
        });

        setLayout(new BorderLayout());
        add(scroll, BorderLayout.CENTER);
        add(southPanel, BorderLayout.SOUTH);

        setSize(800, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}

Purchase
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Purchase extends JFrame {
    public Purchase() {
        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        JButton purchase = new JButton("History");
        JButton suppliers = new JButton("Suppliers");
        JButton back = new JButton("Back");

        // Style buttons
        JButton[] buttons = {purchase, suppliers, back};
        for (JButton btn : buttons) {
            btn.setBackground(brown);
            btn.setForeground(Color.WHITE);
            btn.setFocusPainted(false);
            btn.setPreferredSize(new Dimension(120, 30));
        }

        // Set layout and background
        setLayout(new FlowLayout());
        getContentPane().setBackground(beige);

        add(purchase);
        add(suppliers);
        add(back);

        purchase.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                History window = new History();
                window.setSize(1000, 600);
            }
        });

        suppliers.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                Suppliers window = new Suppliers();
                window.setSize(1000, 400);
            }
        });

        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose(); // Close current window
                new OptionsWindow(); // Open OptionsWindow
            }
        });

        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}

History
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.FileWriter;

public class History extends JFrame {
    public History() {
        super("Purchases");

        // Set background color
        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        String[] cols = { "Product", "Quantity", "Paid" };
        Object[][] data = {
            {"Benches", 100, "Yes"},
            {"Book shelfs", 25, "No"},
            {"Cabnets", 75, "Yes"},
            {"Counter", 40, "No"},
            {"Desks", 80, "Yes"},
            {"Lab Stools", 60, "No"},
            {"Meeting tables", 30, "Yes"},
            {"Office chairs", 100, "No"},
            {"Sofa", 50, "Yes"},
            {"Student chairs", 100, "No"}
        };

        DefaultTableModel model = new DefaultTableModel(data, cols);
        JTable table = new JTable(model);
        JScrollPane scroll = new JScrollPane(table);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        // Search panel
        JButton search = new JButton("Search");
        JTextField searchfield = new JTextField(20);
        search.setBackground(brown);
        search.setForeground(Color.WHITE);

        JPanel searchPanel = new JPanel(new FlowLayout());
        searchPanel.setBackground(beige);
        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchfield);
        searchPanel.add(search);

        // Add panel
        JButton add = new JButton("Add data");
        JTextField productfield = new JTextField(10);
        JTextField quantityfield = new JTextField(10);
        JTextField paidfield = new JTextField(10);
        add.setBackground(brown);
        add.setForeground(Color.WHITE);

        JPanel addpanel = new JPanel(new FlowLayout());
        addpanel.setBackground(beige);
        addpanel.add(new JLabel("Product"));
        addpanel.add(productfield);
        addpanel.add(new JLabel("Quantity"));
        addpanel.add(quantityfield);
        addpanel.add(new JLabel("Paid"));
        addpanel.add(paidfield);
        addpanel.add(add);

        // Bottom panel
        JButton back = new JButton("Back");
        JButton delete = new JButton("Delete");
        back.setBackground(brown);
        back.setForeground(Color.WHITE);
        delete.setBackground(brown);
        delete.setForeground(Color.WHITE);

        JPanel bottompanel = new JPanel(new FlowLayout());
        bottompanel.setBackground(beige);
        bottompanel.add(back);
        bottompanel.add(delete);

        // Action Listeners
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose(); // Close current window
                new Purchase(); // Assuming Purchase class exists
            }
        });

        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    model.removeRow(row);
                }
            }
        });

        search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String text = searchfield.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });

        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String P = productfield.getText().trim();
                String Q = quantityfield.getText().trim();
                String Pa = paidfield.getText().trim();

                if (P.isEmpty() || Q.isEmpty() || Pa.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields: ( Product, Quantity, and Paid. )", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                model.addRow(new Object[] { P, Q, Pa });

                try {
                    FileWriter writer = new FileWriter("data.csv", true);
                    writer.write(P + "," + Q + "," + Pa + "\n");
                    writer.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                productfield.setText("");
                quantityfield.setText("");
                paidfield.setText("");
            }
        });

        // Frame layout
        setLayout(new BorderLayout());
        getContentPane().setBackground(beige);
        add(scroll, BorderLayout.CENTER);

        JPanel southPanel = new JPanel(new GridLayout(3, 1));
        southPanel.add(searchPanel);
        southPanel.add(addpanel);
        southPanel.add(bottompanel);
        southPanel.setBackground(beige);
        add(southPanel, BorderLayout.SOUTH);

        setSize(700, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}

Suppliers
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;

public class Suppliers extends JFrame {

    public Suppliers() {
        super("Suppliers Record");

        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        String[] cols = {"Name", "Address", "Contact"};
        Object[][] data = {
            {"Sofa Supplier", "123 Street", "555-500"},
            {"Office Chairs Co.", "456 Avenue", "555-250"},
            {"Student Chairs Ltd.", "789 Road", "555-200"},
            {"Lab Stools Inc.", "101 Blvd", "555-100"},
            {"Book Shelfs LLC", "202 Drive", "555-750"},
            {"Cabinets & More", "303 Path", "555-800"},
            {"Desks Galore", "404 Lane", "555-600"},
            {"Benches Plus", "505 Terrace", "555-300"},
            {"Meeting Tables Corp.", "606 Court", "555-750"},
            {"Counter Suppliers", "707 Circle", "555-400"}
        };

        DefaultTableModel model = new DefaultTableModel(data, cols);
        JTable table = new JTable(model);
        JScrollPane scroll = new JScrollPane(table);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        JButton back = new JButton("Back");
        JButton delete = new JButton("Delete");
        JButton search = new JButton("Search");
        JButton add = new JButton("Add data");

        JTextField searchField = new JTextField(15);
        JTextField nameField = new JTextField(10);
        JTextField addressField = new JTextField(10);
        JTextField contactField = new JTextField(10);

        // Button styling
        JButton[] buttons = {back, delete, search, add};
        for (JButton btn : buttons) {
            btn.setBackground(brown);
            btn.setForeground(Color.WHITE);
            btn.setFocusPainted(false);
        }

        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        searchPanel.setBackground(beige);
        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchField);
        searchPanel.add(search);

        // Add data panel
        JPanel addPanel = new JPanel(new FlowLayout());
        addPanel.setBackground(beige);
        addPanel.add(new JLabel("Name:"));
        addPanel.add(nameField);
        addPanel.add(new JLabel("Address:"));
        addPanel.add(addressField);
        addPanel.add(new JLabel("Contact:"));
        addPanel.add(contactField);
        addPanel.add(add);

        // Control panel
        JPanel actionPanel = new JPanel(new FlowLayout());
        actionPanel.setBackground(beige);
        actionPanel.add(back);
        actionPanel.add(delete);

        // Combined control panels
        JPanel controls = new JPanel();
        controls.setLayout(new BoxLayout(controls, BoxLayout.Y_AXIS));
        controls.setBackground(beige);
        controls.add(searchPanel);
        controls.add(addPanel);
        controls.add(actionPanel);

        // Action listeners
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                new Purchase(); // Ensure Purchase class exists
            }
        });

        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    model.removeRow(table.convertRowIndexToModel(row));
                }
            }
        });

        search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String text = searchField.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });

        
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                String N = nameField.getText().trim();
                String A = addressField.getText().trim();
                String C = contactField.getText().trim();

                if (N.isEmpty() || A.isEmpty() || C.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields: ( Name, Address, and Contact. )", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                model.addRow(new Object[]{N, A, C});

                try {
                    FileWriter writer = new FileWriter("data.csv", true);
                    writer.write(N + "," + A + "," + C + "\n");
                    writer.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                nameField.setText("");
                addressField.setText("");
                contactField.setText("");
            }
        });

        setLayout(new BorderLayout());
        add(scroll, BorderLayout.CENTER);
        add(controls, BorderLayout.SOUTH);

        getContentPane().setBackground(beige);
        setSize(750, 420);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }
}

Profit
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.*;

public class Profit extends JFrame {
    public Profit() {
        super("Profit");

        // Define custom colors
        Color beige = new Color(245, 245, 220);
        Color brown = new Color(181, 101, 29);

        // Table data and model
        String[] cols = {"Time", "Profit"};
        Object[][] data = {
            {"Weekly", "$1000"},
            {"Monthly", "$10,000"},
            {"Annual", "$100,000"},
        };

        DefaultTableModel model = new DefaultTableModel(data, cols);
        JTable table = new JTable(model);
        table.setBackground(Color.WHITE);  // Optional for consistency
        JScrollPane scroll = new JScrollPane(table);

        // Row sorter
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        // Back button styling
        JButton back = new JButton("Back");
        back.setBackground(brown);
        back.setForeground(Color.WHITE);
        back.setFocusPainted(false);

        // Panel setup
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.setBackground(beige);
        bottomPanel.add(back);

        // Set background of main content
        getContentPane().setBackground(beige);

        // Button action
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                dispose();
                new Sales(); // Navigate back to Sales window
            }
        });

        // Layout setup
        setLayout(new BorderLayout());
        add(scroll, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        setSize(400, 250);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }
}



